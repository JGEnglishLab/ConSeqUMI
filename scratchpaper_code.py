import pandas as pd
#from Levenshtein import ratio, distance
from Bio import pairwise2, SeqIO
#import consensus_maker as cm
#import pipeline as p
import random
import re
from statistics import mean
from timeit import default_timer as timer
from collections import defaultdict
import numpy as np
from collections import Counter

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

'''
file = 'test/first_benchmark/seq_bin0.fq'
records = []
with open(file) as handle:
    for record in SeqIO.parse(handle, "fastq"):
        records.append(record[:1125])

with open('test/truncated_bin0.fq', "w") as centerFile:
    SeqIO.write(records, centerFile, "fastq")


#'''
'''
benchmark = pd.read_csv('test/first_benchmark/benchmark.csv').iloc[1: , :]
sequences = pd.read_csv('test/first_benchmark/benchmark_sequences.csv').iloc[1: , :]

print(benchmark)
print(sequences)
combos = []


for i in range(1,11):
    combos.extend(list(zip(benchmark.iloc[:,i],sequences.iloc[:,i])))

combos.sort()
data = [[combos[0][0],combos[0][1],-1]]
for i in range(len(combos)):
    lastSeq = combos[i-1][1]
    data.append([combos[i][0],combos[i][1],distance(lastSeq, combos[i][1])])

df = pd.DataFrame(data, columns = ['Distance from Consensus','Sequence','Distance from Previous Sequence'])
df.to_csv('test/first_benchmark/comprehensive.csv', index=False)

print(df.drop('Sequence', axis=1))

seq0 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCTCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCATAGCTTATCGATAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGGGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAATGATTT'

print(len(seq0))

seq08 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACATTTC'

seq10 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCGTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACGTT'

seq14 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGGCAAGGGCGAGGAGCTGTTCACCCGGGGTGGTGCCCATCCTCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACATT'

seq67 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTTAAATTTCAAAAAAAAAAAAAAAATACACATCTCTACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'

seqOdd1 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCAGCGGCCGCATGGTGGCTGGGGCGAGGAGCTGTTCCGCAGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGCAGTACCACCTACAGCAAAGCTGACCCTGAGTTCATTTGCCACCGGCAAGCTGCCCGCAACCCACCCTCGTGATACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCGACCACATGAAGCGGCGGCTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAGCTTCGGGCCGCGCCGAGGTGAAGTTCGAGGCGACACCCTGATGAACCGCATCGAGCTGAAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACAGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGGAGACGGCAGCGTGCAGCTCGCCGACCACTACACCAACAGAACACCCCCATCAGCGACGGCCCGATACACTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCCTGAGCAAAGACCCCAACGAGGAAGCGCGATCCGCATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCCGTAGACCGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATAGTACGCCCCAATGGCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGGTATTGCATAATGCATCAGGCTGGTATATTTAGATCCCCGCTTTACCGCGGGCAATACTTTTTTTTTTTTTTTTTTTTTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAACACCAAAACTCGACGTATTTCCGAGGCGCAGTGCATAATACTACGCAGTGTTGCCAAATAATCACTATAGTAACCATTTATTCAGCGGACGCCAAACTCAATGTATTTCTGAGAGCATAGTGCATAAACTATACCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAATTTTGTTTTAACATTTC'

seqOdd2 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGGTGCCCATCCTGGTCGAGCTGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCTCGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCTGGACTACAGCTGAAGAAAGCACGACTTCTTTCAAGTCCGCCATGCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCGTATATACACCGCGCGAAGCTACGTCCAGGAGCGCCTTTCTTCAAGGACGACGGCAACTACAAGCATTCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGTATCGAGTTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGCGAACTTTAAGATCCGCCACAATATCGAGTGACGCAGCGTGCAGCCAAGCCGACCACTACCAGTACCCCTCATCGGCGACGGCCCCGTGCTGCTGCCCGGGACAACAGGTTCGCCTGGAGTACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCTCTGCTGAGTTCGTGACCGCTGCCGGGATTTCGGCATGGACGAGCTGTACAAGTAAGAATTCGACACGTTTATCGATAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGAACTGATGTGCATAATGCATCAGGCTGTTATTAGGATCTCGCTTACTGCGGGCAACATAGCAACACCAAAACTCGACGTATTTCTGAGGAGGCGTAGGTGCATAATGCTGCGCAGTGTTACAACAATCACTATATACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTTATAGCCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTGACCCAACAAAATTTGTTTTTAATGATTT'

print('0 vs. 8')
alignments = pairwise2.align.globalxx(seq0, seq08)
print(pairwise2.format_alignment(*alignments[0]))

print('0 vs. 10')
alignments = pairwise2.align.globalxx(seq0, seq10)
print(pairwise2.format_alignment(*alignments[0]))

print('0 vs. 14')
alignments = pairwise2.align.globalxx(seq0, seq14)
print(pairwise2.format_alignment(*alignments[0]))

print('0 vs. 67')
alignments = pairwise2.align.globalxx(seq0, seq67)
print(pairwise2.format_alignment(*alignments[0]))
#'''
'''
print('All of them!!')
binPath = 'test/first_benchmark/seq_bin0.fq'
records = [record for record in SeqIO.parse(binPath, "fastq")]
count = 0
als = []
for record in records:
    count += 1
    if count % 100 == 0: print(count)
    alignments = pairwise2.align.globalxx(seq0, str(record.seq))
    dst = distance(seq0, str(record.seq))
    als.append((dst, str(record.seq)))

als.sort()

for i in range(len(als)):
    print(i)
    print(als[i][0])
    alignments = pairwise2.align.globalxx(seq0, als[i][1])
    print(pairwise2.format_alignment(*alignments[0]))

print([x[0] for x in als])
'''
'''
consPath = 'test/first_benchmark/consensus.fasta'
seqs = [(int(record.id),str(record.seq)) for record in SeqIO.parse(consPath, "fasta")]
seqs.sort()
seqs = [x[1] for x in seqs]
temp = [x for x in cm.cluster_longread_consensus_sequences(seqs, dendrogramFile='test/first_benchmark/histogram.png')]
'''
cons0 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCTCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCATAGCTTATCGATAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGGGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAATGATTT'
'''
cons10 = 'CAGCATAGTACATTTCCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATACTAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACATTTCAAAAAAAAAAAAAAAGGCGATCTGGCACGGAGGTATCAGTCGTCATCAGCAGTCCCACAGGTGCTGGAGTCTTGTGTCCCGGTTACCAGGTTGGCGCCAGCAGCATCAACCCAAAAAAATCGGGCGCGCTTCGTTCCAGTTGCACGTATTGCTAGGTTAACACGGTAACTGGGAGGACCTGAGCTCAGCACACCTGTGTGGCTCTTCGGATCGGTGGTGCATGCCACACATCTCTACGGTGGTCCTAAATAGTCAGCATAGTACATTTCATCTGACTAATACCACAACGCACACCGGCGCGCATGATGGAGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCATCCCTGGTCGAGCTGGACGGCGACGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGAGCGATGCCACCTACGGCGGCTGTTCCTGAGTTCGTGCTGCCGGCGGCTGGCGTGCCCTGGCCTTTCCCTCGGCTGACCACCTGACCTACGGCGTGCGGTCGCTGGCCTTCCCCGGCCACGCCAGAGGAGCGCGCGGCTTCTTCAAGTGCGCCATGCCAGAAGGCGCGACCGGGAGCGCACCATCTTCTTCAAGGACGACGGCGCTGGACCCGCGAGTGAAGTTGGGGGCGGCGCACATCAACGTCAGAGCTGAAGGGCATCGGCCAAGGAGGACATCCTGGGGCACAACTGGAGTACAGCACGACGCGGCCGCGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGCGCAGCTCGCCCGACCACTACCAACAGAACACCCCATCGGCGACGGCTACGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCTGAGCAAAGACCCCAACGAGAAGCGATCCATGGTCCTGCTGGAGTTGTGACCCGCCGCCGGGATCACTCGGCAGCGGACGACTGGCCGCAAGTAAGAATTCGATATCAGAAAGCATCGATACTAGTGCGCTTGTGACGCTTTGAAAAAAGAAAGCGCGACTGGCGAGCTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCGCTTACAGGAACGTGTAGCGCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGTTGCCAAATAATCACTATATTGTAACATTTATTCAGCGGACGCCAAAACTCAATGTATGTATTTCTGAGAGCAGCATGGTATAATACCGTAGCGTCTGCGCAACTTTTATTATTTTCTTTATTAATCAACAAAATTTTGTTTTAACATT'
cons18 = 'CAGCGCCGTACGCATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATACTAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGGACGTATTTCCGAGGGGGCGCAGTGCATAATGCTGCGGGGTGTTGCCAAAAAACCACTTTATAAACCTTTTTTTGGGGGGCCCCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACATTTCAAAAAAAAAAAAGGGTAGAACAAACCGCACATCCAGTCATCGGCAGTCCCACCTGGTGCACAGGTCTTGTGTCCCAGTTACCAGGTTAACCTTGGCAATACGTGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATCGGTGTACTTCGTTCAGTTGCGACGGCTTGCTAAGGTTAACCTGGTAACTGGGACACAAGACTCCAGCACCTGAGTGTAGCTCTTCCGGATTGCTGGCACGGGTGTTCATCTCTACAGTGGTCCACCAGCGGATCAGCATAGTACATTTCATCCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGGCTGTTCACCGGGGTGGTGCCACATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGGGGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCCCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCGGCGCTTCTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAGCTACAGGGCCCGCGCCGAGGTGAAGTTCGAGGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAAGGAGGACGGCAACATCCATGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCCAAGCTTATCGATACTAGATACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAACAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACATTT'
cons22 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTCACCACAGCAGAACACCCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATACTAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACATTTCAAAAAAAAAAAAAAGTACCGGAATATTCATCAGTCGTCATCAGCAGTCCCACAGGTGCTGGAGTCTTGTGTCCCAGTTACCAGGTTAACTCCTTTGAGTGTGGCTCTCGGATGGGCCAGCAGCCTACTCATCTCTGGCTGTGGTCCTGTGCCAGTCAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGGAGCGCACCATCTCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACCTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATACTAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGTGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACATTTCAAAAA'
cons41 = 'TAAGCATAGGCACATTTCATCTGACTAATACCACAACACCAGCGGCCGCATGATGAGCAAGGGCGAGCTGTTCACCCGGGGTGGTGCCCATCCTGGTCGAGGCTGGACGGCGACGTAAGCAGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGCAACCACACCTACGGCAAGCTGGTGGTGTTGTGGTAGTAAGTCGGATGGAAATGGCCTTATGCTGACTGTTAGGACCACCGTAGAATAGCTCTTCGGATTACTGCTTTGGACCACGTATCTCTACGGTGGTCCTAAATAGTCAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGATTGAGAAGCAAGGGCGAGGAGCTGTTCACCGGGGGTGGGTGCCCATCCTGGTCGAGGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAGAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGAGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCGACAAGCTGGGGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACCCCTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAGAATTCGATATCAAGCTTATCGATACTGAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGAACGGCAATATAACAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCTCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTTATTAATCAACAAAATTTTGTTTTTAACATTT'

print(len(cons0))
print(len(cons10))
print(len(cons18))
print(len(cons22))
print(len(cons41))
print('0 vs. 41')
alignments = pairwise2.align.globalxx(cons0, cons41)
print(pairwise2.format_alignment(*alignments[0]))
'''
'''
# Knocking off the bottom 20%
file = 'test/data/first_benchmark/seq_bin0.fq'
scores = []
records = []
with open(file) as handle:
    for record in SeqIO.parse(handle, "fastq"):
        scores.append(distance(cons0, str(record.seq)))
        records.append(record)

sorted_y_idx_list = sorted(range(len(scores)),key=lambda x:scores[x])
records = [records[i] for i in sorted_y_idx_list ]
records = records[:(len(records)//5)*4]

with open('test/data/top_80/top_80_bin0.fq', "w") as centerFile:
    SeqIO.write(records, centerFile, "fastq")
#'''
cons0 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCTCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCATAGCTTATCGATAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGGGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAATGATTT'

cons0_2 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATTATCGCTTATCGATAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCGTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAATATTT'

cons0_3 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACCGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACATTT'

cons1500 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACACAACCGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTTAACATTT'

#file = 'test/data/top_80/seq_bin0.fq'
#with open(file) as handle:
#    records = [record for record in SeqIO.parse(handle, "fastq")]

#with open('test/data/top_80/seq_bin0_3.fq', "w") as centerFile: SeqIO.write(records, centerFile, "fastq")


#import filecmp
#print(filecmp.cmp('test/data/top_80/seq_bin0.fq', 'test/data/first_benchmark/seq_bin0.fq', shallow=False))
#seq1 = p.run_medaka_on_file('test/data/first_benchmark/', 'test/data/first_benchmark/seq_bin0.fq')
#seq1 = p.run_medaka_on_file('test/data/top_80/', 'test/data/top_80/seq_bin0.fq')
#seq2 = p.run_medaka_on_file('test/data/top_80/', 'test/data/top_80/seq_bin0_3.fq')
#seq2 = p.run_medaka_on_file('test/data/top_80/', 'test/data/top_80/temp_bin.fq')
#print(seq2)


#alignments = pairwise2.align.globalxx(seq1, seq2)
#print(pairwise2.format_alignment(*alignments[0]))

#df = p.benchmark_binned_sequences('test/data/top_80/', 'test/data/top_80/top_80_bin0.fq')
#df1, df2 = p.benchmark_binned_sequences('test/data/top_80/', 'test/data/top_80/seq_bin0.fq')
#df1, df2 = p.benchmark_binned_sequences('test/data/top_80/', 'test/data/top_80/top_80_bin0.fq')
#df = p.benchmark_binned_sequences('test/data/top_80/', 'test/data/first_benchmark/seq_bin0.fq')
#df.to_csv('test/data/top_80/benchmark_original.csv', index=False)
#df.to_csv('test/data/top_80/benchmark.csv', index=False)
#df1.to_csv('test/data/top_80/benchmark_test_top80.csv', index=False)
#df2.to_csv('test/data/top_80/benchmark_test_sequences_top80.csv', index=False)


#p.make_draft_file('test/data/sup_original_compare/seq_bin_combined_originalFirst.fq', 'test/data/sup_original_compare/seq_bin_combined_originalFirst_draft.fq')
#df1, df2 = p.benchmark_binned_sequences('test/data/sup_original_compare/', 'test/data/sup_original_compare/seq_bin_sup.fq', iteration = 100)
#df1.to_csv('test/data/benchmark_sup_real.csv')


'''
# generic pairwise comparison
seq1 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATACTAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACATTTC'
seq2 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATACTAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACATTTC'
alignments = pairwise2.align.globalxx(seq1, seq2)
print(pairwise2.format_alignment(*alignments[0]))
#'''
'''
# Print all error sequences in given tidy benchmark file
seq1_original = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATACTAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACATTTC'
seq2_myAlgorithm = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATACTAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTAATCAACAAAATTTTGTTTTTAACATTTC'
df = pd.read_csv('~/Desktop/full_benchmark5.csv')
df = df[df['originalClusterSize'] > 1000]
print(len(df))
df = df[df['levenshteinDistance'] > 0]

minI, maxI = 100, 120
df1 = df[df['clusterSize'] >= minI]

seqs1 = Counter(df1['tempSequence'])
print('***clusterSize minimum: ' + str(minI))
print('***number of total sequences: ' + str(len(df1)))
for x in seqs1.most_common():
    print('frequency of error sequence below:' + str(x[1]))
    print(seq1_original == x[0])
    alignments = pairwise2.align.globalxx(seq1_original, x[0])
    print(pairwise2.format_alignment(*alignments[0]))
print('\n\ntrue consensus vs. best draft sequence:')
alignments = pairwise2.align.globalxx(seq1_original, seq2_myAlgorithm)
print(pairwise2.format_alignment(*alignments[0]))
#'''


#for record in records:
#    print(str(record[:5].seq) + '\t' + str(record[5:].seq))

#with open('/Users/calebcranney/Desktop/seq_bin0.fasta', "w") as centerFile:
#    SeqIO.write(records, centerFile, "fasta")

#def mean(lst): return sum(lst)/len(lst)
def generate_score_dict(len_pattern, len_string, weight):
    scale = len_string - len_pattern
    scores = [i for i in range(scale)]
    score_reduction = scale/len_pattern
    scores = [weight - i*score_reduction for i in scores]
    scoreDict = {i:scores[i] for i in range(scale)}
    return scoreDict

def score_character(lst_of_search_indices, scoreDict): return sum([scoreDict[x] for x in lst_of_search_indices])

def find_next_character(subStrings, tempPattern, weight):

    scoreDict = generate_score_dict(len(tempPattern), len(subStrings[0]), weight)
    pattern = re.compile(tempPattern + '.')
    tempDict = defaultdict(list)

    all_characters = []
    for x in subStrings:
        r = pattern.search(x)
        if r: tempDict[r.group(0)[-1]].append(r.start(0)); all_characters.append(r.group(0)[-1])
    scores = sorted([(score_character(tempDict[x], scoreDict), x) for x in tempDict], reverse=True)
    if len(scores) == 1 or scores[0][0] != scores[1][0]: return scores[0][1]
    c = Counter(all_characters)
    return c.most_common()[0][0]

def adjust_all_string_lengths(strs, buffer_length):
    max_length = len(max(strs, key = len))
    strs = [x.ljust(max_length+buffer_length) for x in strs]
    return strs

def initialize_consensus_output_string(strs, excerpt_length):
    tempList = [x[:excerpt_length] for x in strs]
    final = max(set(tempList), key = tempList.count)
    return final


def find_consensus2(strs, weight = 3):
    excerpt_length = 5
    buffer_length = 10
    max_length = len(max(strs, key = len))
    strs = adjust_all_string_lengths(strs, buffer_length)
    final = initialize_consensus_output_string(strs, excerpt_length)
    for i in range(max_length-buffer_length):
        tempPattern = final[-excerpt_length:]
        subStrings = [x[i:i+buffer_length] for x in strs]
        nex = find_next_character(subStrings, tempPattern, weight)
        final += nex
    return final.strip(' ')

def find_consensus(strs):
    excerpt_length = 5
    buffer_length = 10
    max_length = len(max(strs, key = len))
    strs = [x.ljust(max_length+buffer_length) for x in strs]
    tempList = [x[:excerpt_length] for x in strs]
    final = max(set(tempList), key = tempList.count)
    for i in range(max_length-buffer_length):
        tempPattern = final[-excerpt_length:]
        #print(i)
        #print(tempPattern)
        subStrings = [x[i:i+buffer_length] for x in strs]
        if i == 1104:
            #for x in subStrings: print(x)
            t = defaultdict(int)
            for x in [getattr(re.search(tempPattern + '(.)', x[i:i+buffer_length]), 'groups', lambda:[u""])()[0] for x in strs]: t[x] += 1
            #print(t)
        next_characters = [getattr(re.search(tempPattern + '(.)', x[i:i+buffer_length]), 'groups', lambda:[u""])()[0] for x in strs]
        next_characters = [x for x in next_characters if len(x) != 0]
        #print(i)
        #print(next_characters)

        #nex = mode(next_characters)[0]

        pattern = re.compile(tempPattern + '.')
        tempDict = defaultdict(list)
        for x in strs:

            #print(x[i:i+buffer_length])

            r = pattern.search(x[i:i+buffer_length])
            if r: tempDict[r.group(0)[-1]].append(r.start(0))
        #print(tempPattern)
        #for x in tempDict:
            #print(x)
            #print(tempDict[x])
            #print()
        bestKeys = []
        mostFreqFind = -1
        for key, val in tempDict.items():
            if len(val) > mostFreqFind:
                bestKeys = [key]
                mostFreqFind = len(val)
            if len(val) == mostFreqFind:
                bestKeys.append(key)
        bestKey = bestKeys[0]
        if len(bestKeys) > 1:
            bestVal = np.inf
            for key in bestKeys:
                #print(key)
                #print(tempDict[key])
                if mean(tempDict[key]) < bestVal:
                    bestKey = key
                    mean(tempDict[key])
        nex = bestKey


        #print(i)
        #print(next_characters)
        #nex = mode(next_characters)[0]
        '''
        tenPercent = len(next_characters)
        next_characters = sorted([(next_characters.count(x), x ) for x in set(next_characters)], reverse=True)
        print(next_characters)
        if len(next_characters) > 1 and next_characters[1][0] > next_characters[0][0] - tenPercent:
            t = defaultdict(list)
            for x in strs:
                for m in re.finditer(temp + '(.)', x[i:i+buffer_length]):
                    t[m.group(0)[0]].append(m.start())
                nex = 'A'
                bestVal = np.inf
                for key,val in t.items():
                    if mean(val) < bestVal:
                        bestKey = key
                        bestVal = mean(val)

        else:
            nex = next_characters[0][1]
        '''
        final += nex
    return final.strip(' ')


#'''
# testing find_consensus algorithm
binPath = '/Users/calebcranney/Desktop/seq_bin0.fq'
with open(binPath) as handle:
    records = [record for record in SeqIO.parse(handle, "fastq")]
random.seed(6)
seqStrs = [str(record.seq) for record in records]
for i in range(len(seqStrs)):
    while seqStrs[i][-1] == 'A': seqStrs[i] = seqStrs[i][:-1]
seqStrs = random.sample(seqStrs, k=100)
seq1 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATACTAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACATTTC'
#seq2 = 'CAGCATAGTACATTTCATCTGACTAATACCACAACACCACCAGCGGCCGCATGGTGAGCAAGGGCGAGGAGCTGTTCACCGGGGTGGTGCCCATCCTGGTCGAGCTGGACGGCGACGTAAACGGCCACAAGTTCAGCGTGTCCGGCGAGGGCGAGGGCGATGCCACCTACGGCAAGCTGACCCTGAAGTTCATTTGCACCACCGGCAAGCTGCCCGTGCCCTGGCCCACCCTCGTGACCACCCTGACCTACGGCGTGCAGTGCTTCAGCCGCTACCCCGACCACATGAAGCAGCACGACTTCTTCAAGTCCGCCATGCCCGAAGGCTACGTCCAGGAGCGCACCATCTTCTTCAAGGACGACGGCAACTACAAGACCCGCGCCGAGGTGAAGTTCGAGGGCGACACCCTGGTGAACCGCATCGAGCTGAAGGGCATCGACTTCAAGGAGGACGGCAACATCCTGGGGCACAAGCTGGAGTACAACTACAACAGCCACAACGTCTATATCATGGCCGACAAGCAGAAGAACGGCATCAAGGTGAACTTCAAGATCCGCCACAACATCGAGGACGGCAGCGTGCAGCTCGCCGACCACTACCAGCAGAACACCCCCATCGGCGACGGCCCCGTGCTGCTGCCCGACAACCACTACCTGAGCACCCAGTCCGCCCTGAGCAAAGACCCCAACGAGAAGCGCGATCACATGGTCCTGCTGGAGTTCGTGACCGCCGGGATCACTCTCGGCATGGACGAGCTGTACAAGTAAGAATTCGATATCAAGCTTATCGATACTAGTACGCCCCAATGACCCGACCAGCAAAACTCGATGTACTTCCGAGGAACTGATGTGCATAATGCATCAGGCTGGTATATTAGATCCCCGCTTACCGCGGGCAATATAGCAACACCAAAACTCGACGTATTTCCGAGGAGGCGCAGTGCATAATGCTGCGCAGTGTTGCCAAATAATCACTATATTAACCATTTATTCAGCGGACGCCAAAACTCAATGTATTTCTGAGGAAGCATGGTGCATAATGCCATGCAGCGTCTGCATAACTTTTTATTATTTCTTTTATTAATCAACAAAATTTTGTTTTTAACATTTC'
alignments = pairwise2.align.globalxx(seq1, find_consensus2(seqStrs, weight = 3))
print(pairwise2.format_alignment(*alignments[0]))

#print(find_consensus2(seqStrs))
#'''

from PyQt5.QtWidgets import (
    QLabel,
    QLineEdit,
    #QWidget,
    #QApplication,
    QFormLayout,
    QComboBox,
    #QCheckBox,
    QPushButton,
    #QFileDialog,
    #QPlainTextEdit,
    #QVBoxLayout,
    #QStyle,
    #QMainWindow,
)
from ConSeqUMI.gui.TabWindow import TabWindow

class BenchmarkTabWindow(TabWindow):

    def set_file_layout(self, fileLayout: QFormLayout) -> None:
        self.inputLabel = QLabel("Input File Path")
        self.inputLabel.setToolTip(
            "Required. \nPath to folder that only contains input Nanopore read fastq files."
        )
        self.inputField = QLineEdit()
        self.inputField.setEnabled(False)

        self.inputBrowseButton = QPushButton("Browse")
        self.inputBrowseButton.clicked.connect(lambda: self.get_file(self.inputField, isFile=True))

        fileLayout.addRow(self.inputLabel, self.inputBrowseButton)
        fileLayout.addRow(self.inputField)

        self.outputLabel = QLabel("Output Directory Path")
        self.outputLabel.setToolTip(
            "Required. \nPath where output folder will be saved."
        )
        self.outputField = QLineEdit()
        self.outputField.setEnabled(False)
        self.outputBrowseButton = QPushButton("Browse")
        self.outputBrowseButton.clicked.connect(lambda: self.get_file(self.outputField))

        fileLayout.addRow(self.outputLabel, self.outputBrowseButton)
        fileLayout.addRow(self.outputField)

        self.outputNameLabel = QLabel("Output Directory Title (optional)")
        self.outputNameLabel.setToolTip(
            "Optional, has default value. \nName of output file generated by the program."
        )
        self.outputNameField = QLineEdit()
        fileLayout.addRow(self.outputNameLabel, self.outputNameField)

        self.referenceLabel = QLabel("Reference File Path (optional)")
        #self.referenceLabel.setToolTip(
        #    "Required. \nA text file with f, F, r, R references listed. \nDefaults to: GAGTGTGGCTCTTCGGAT, ATCTCTACGGTGGTCCTAAATAGT, AATGATACGGCGACCACCGAGATC, and CGACATCGAGGTGCCAAAC, respectively."
        #)
        self.referenceField = QLineEdit()
        self.referenceField.setEnabled(False)
        self.referenceBrowseButton = QPushButton("Browse")
        self.referenceBrowseButton.clicked.connect(
            lambda: self.get_file(self.referenceField, isFile=True)
        )

        fileLayout.addRow(self.referenceLabel, self.referenceBrowseButton)
        fileLayout.addRow(self.referenceField)

    def set_setting_layout(self, settingLayout: QFormLayout) -> None:
        self.consensusAlgorithmLabel = QLabel("Consensus Algorithm")
        self.consensusAlgorithmComboBox = QComboBox()
        self.consensusAlgorithmComboBox.addItems(["pairwise", "lamassemble", "medaka"])
        settingLayout.addRow(self.consensusAlgorithmLabel, self.consensusAlgorithmComboBox)

        self.intervalsTitle = QLabel("Benchmark Intervals (optional)")
        self.intervalsTitle.setToolTip("Intervals at which benchmarking standards are set. Default is 10. For example, at default, the program will select 10 random target sequences to generate a consensus sequence, then 20 etc.")
        self.intervalsField = QLineEdit()
        settingLayout.addRow(self.intervalsTitle, self.intervalsField)

        self.iterationsTitle = QLabel("Iteration Number (optional)")
        self.iterationsTitle.setToolTip("Number of iterations that occur at each interval. Default is 100. For example, at default, the program will generate a consensus sequence 100 times from randomly selecting 10 sequences, then 100 times for 20 sequences etc.")
        self.iterationsField = QLineEdit()
        settingLayout.addRow(self.iterationsTitle, self.iterationsField)

    def set_args(self) -> list:
        args = ["benchmark"]
        if self.inputField.text():
            args.extend(["-i", self.inputField.text()])
        if self.outputField.text():
            args.extend(["-o", self.outputField.text()])
        if self.referenceField.text():
            args.extend(["-r", self.referenceField.text()])
        if self.intervalsField.text():
            args.extend(["-int", self.intervalsField.text()])
        if self.iterationsField.text():
            args.extend(["-iter", self.iterationsField.text()])
        args.extend(["-c", self.consensusAlgorithmComboBox.currentText()])
        return args
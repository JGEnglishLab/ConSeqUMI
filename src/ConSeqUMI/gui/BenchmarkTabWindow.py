from PyQt5.QtWidgets import (
    QLabel,
    QLineEdit,
    # QWidget,
    # QApplication,
    QFormLayout,
    QComboBox,
    # QCheckBox,
    QPushButton,
    # QFileDialog,
    # QPlainTextEdit,
    # QVBoxLayout,
    # QStyle,
    # QMainWindow,
)
from ConSeqUMI.gui.TabWindow import TabWindow


class BenchmarkTabWindow(TabWindow):
    def set_instruction_link(self, instructionLinkText) -> None:
        instructionLinkText.appendPlainText(
            "https://github.com/JGEnglishLab/ConSeqUMI/wiki/Benchmarking-Consensus"
        )

    def set_file_layout(self, fileLayout: QFormLayout) -> None:
        self.inputLabel = QLabel("Input File Path")
        self.inputLabel.setToolTip(
            "Required. \nPath to fastq file containing nanopore read copies of a single sequence."
        )
        self.inputField = QLineEdit()

        self.inputBrowseButton = QPushButton("Browse")
        self.inputBrowseButton.clicked.connect(
            lambda: self.get_file(self.inputField, isFile=True)
        )

        fileLayout.addRow(self.inputLabel, self.inputBrowseButton)
        fileLayout.addRow(self.inputField)

        self.outputLabel = QLabel("Output Directory Path")
        self.outputLabel.setToolTip(
            "Required. \nPath where output folder will be saved."
        )
        self.outputField = QLineEdit()
        self.outputBrowseButton = QPushButton("Browse")
        self.outputBrowseButton.clicked.connect(lambda: self.get_file(self.outputField))

        fileLayout.addRow(self.outputLabel, self.outputBrowseButton)
        fileLayout.addRow(self.outputField)

        self.outputNameLabel = QLabel("Output Directory Title (optional)")
        self.outputNameLabel.setToolTip(
            "Optional. \nStart of name of output file generated by the program."
        )
        self.outputNameField = QLineEdit()
        fileLayout.addRow(self.outputNameLabel, self.outputNameField)

        self.referenceLabel = QLabel("Reference Sequence File Path (optional)")
        self.referenceLabel.setToolTip(
            "Optional. \nA fasta file with the expected reference sequence for evaluating the accuracy of subsample-derived consensus sequences."
         )
        self.referenceField = QLineEdit()
        self.referenceBrowseButton = QPushButton("Browse")
        self.referenceBrowseButton.clicked.connect(
            lambda: self.get_file(self.referenceField, isFile=True)
        )

        fileLayout.addRow(self.referenceLabel, self.referenceBrowseButton)
        fileLayout.addRow(self.referenceField)

    def set_setting_layout(self, settingLayout: QFormLayout) -> None:
        self.consensusAlgorithmLabel = QLabel("Consensus Algorithm")
        self.consensusAlgorithmComboBox = QComboBox()
        self.consensusAlgorithmComboBox.addItems(["pairwise", "lamassemble", "medaka"])
        settingLayout.addRow(
            self.consensusAlgorithmLabel, self.consensusAlgorithmComboBox
        )

        self.intervalsTitle = QLabel("Benchmark Subsample Sizes (optional)")
        self.intervalsTitle.setToolTip(
            "Optional. \nIntervals at which benchmarking standards are set, usually represented as a single integer indicating step size. \nDefault is 10. \nFor example, at default, the program will select 10 random target sequences to generate a consensus sequence, then 20 etc. \nUsers can also provide a comma-delimited list of integers to specify specific intervals. \nIf provided '10,25' the program will only evaluate subsamples of sizes 10 and 25."
        )
        self.intervalsField = QLineEdit()
        self.intervalsField.setPlaceholderText("10")

        settingLayout.addRow(self.intervalsTitle, self.intervalsField)

        self.iterationsTitle = QLabel("Iteration Number (optional)")
        self.iterationsTitle.setToolTip(
            "Optional. \nNumber of iterations that occur at each interval. \nDefault is 100. \nFor example, at default, the program will generate a consensus sequence 100 times from randomly selecting 10 sequences, then 100 times for 20 sequences etc."
        )
        self.iterationsField = QLineEdit()
        self.iterationsField.setPlaceholderText("100")
        settingLayout.addRow(self.iterationsTitle, self.iterationsField)

    def set_args(self) -> list:
        args = ["benchmark"]
        if self.inputField.text():
            args.extend(["-i", self.inputField.text()])
        if self.outputField.text():
            output = self.outputField.text()
            if output[-1] != "/":
                output += "/"
            outputName = self.outputNameField.text()
            output += outputName
            args.extend(["-o", output])
        if self.referenceField.text():
            args.extend(["-r", self.referenceField.text()])
        if self.intervalsField.text():
            args.extend(["-int", self.intervalsField.text()])
        if self.iterationsField.text():
            args.extend(["-iter", self.iterationsField.text()])
        args.extend(["-c", self.consensusAlgorithmComboBox.currentText()])
        return args

from PyQt5.QtWidgets import (
    QLabel,
    QLineEdit,
    # QWidget,
    # QApplication,
    QFormLayout,
    # QComboBox,
    # QCheckBox,
    QPushButton, QRadioButton,
    # QFileDialog,
    # QPlainTextEdit,
    # QVBoxLayout,
    # QStyle,
    # QMainWindow,
)
from ConSeqUMI.gui.TabWindow import TabWindow


class UmiTabWindow(TabWindow):
    def set_instruction_link(self, instructionLinkText) -> None:
        instructionLinkText.appendPlainText(
            "https://github.com/JGEnglishLab/ConSeqUMI/wiki/UMI-Processing"
        )

    def set_file_layout(self, fileLayout: QFormLayout) -> None:
        self.inputLabel = QLabel("Input Directory Path")
        self.inputLabel.setToolTip(
            "Required. \nPath to folder that only contains input Nanopore read fastq files."
        )
        self.inputField = QLineEdit()

        self.inputBrowseButton = QPushButton("Browse")
        self.inputBrowseButton.clicked.connect(lambda: self.get_file(self.inputField))

        fileLayout.addRow(self.inputLabel, self.inputBrowseButton)
        fileLayout.addRow(self.inputField)

        self.outputLabel = QLabel("Output Directory Path")
        self.outputLabel.setToolTip(
            "Required. \nPath where output folder will be saved."
        )
        self.outputField = QLineEdit()
        self.outputBrowseButton = QPushButton("Browse")
        self.outputBrowseButton.clicked.connect(lambda: self.get_file(self.outputField))

        fileLayout.addRow(self.outputLabel, self.outputBrowseButton)
        fileLayout.addRow(self.outputField)

        self.outputNameLabel = QLabel("Output Directory Title (optional)")
        self.outputNameLabel.setToolTip(
            "Optional. \nStart of name of output file generated by the program."
        )
        self.outputNameField = QLineEdit()
        fileLayout.addRow(self.outputNameLabel, self.outputNameField)

        self.adapterLabel = QLabel("Adapter File Path")
        self.adapterLabel.setToolTip(
            "Required. \nA text file with f, F, r, R adapters listed (in that order)."
        )
        self.adapterField = QLineEdit()
        self.adapterBrowseButton = QPushButton("Browse")
        self.adapterBrowseButton.clicked.connect(
            lambda: self.get_file(self.adapterField, isFile=True)
        )


        fileLayout.addRow(self.adapterLabel, self.adapterBrowseButton)
        fileLayout.addRow(self.adapterField)

    def set_setting_layout(self, settingLayout: QFormLayout) -> None:


        self.umiLengthTitle = QLabel("UMI Length (optional)")
        self.umiLengthTitle.setToolTip(
            "Optional. \nThe expected length of any UMI found, minimum 10. Providing this option \nloosens front adapter requirements and generally results in increased quantity of UMIs and target sequences found."
        )
        self.umiLengthField = QLineEdit()
        self.umiLengthField.setPlaceholderText("None")


        settingLayout.addRow(self.umiLengthTitle, self.umiLengthField)

        self.chimeraExclusionRadio = QRadioButton("Keep Chimeras")
        self.chimeraExclusionRadio.setChecked(False)
        settingLayout.addRow(self.chimeraExclusionRadio)


    def set_args(self) -> list:
        args = ["umi"]
        if self.inputField.text():
            args.extend(["-i", self.inputField.text()])
        if self.outputField.text():
            output = self.outputField.text()
            if output[-1] != "/":
                output += "/"
            outputName = self.outputNameField.text()
            output += outputName
            args.extend(["-o", output])
        if self.adapterField.text():
            args.extend(["-a", self.adapterField.text()])
        if self.umiLengthField.text():
            args.extend(["-u", self.umiLengthField.text()])
        if self.chimeraExclusionRadio.isChecked():
            args.extend(["-k"])

        return args

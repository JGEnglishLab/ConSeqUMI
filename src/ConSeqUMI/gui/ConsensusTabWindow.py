from PyQt5.QtWidgets import (
    QLabel,
    QLineEdit,
    # QWidget,
    # QApplication,
    QFormLayout,
    QComboBox,
    # QCheckBox,
    QPushButton,
    # QFileDialog,
    # QPlainTextEdit,
    # QVBoxLayout,
    # QStyle,
    # QMainWindow,
)
from ConSeqUMI.gui.TabWindow import TabWindow


class ConsensusTabWindow(TabWindow):

    def set_instruction_link(self, instructionLinkText) -> None:
        instructionLinkText.appendPlainText("https://github.com/JGEnglishLab/ConSeqUMI/wiki/Consensus-Generation")

    def set_file_layout(self, fileLayout: QFormLayout) -> None:
        self.inputLabel = QLabel("Input Directory Path")
        self.inputLabel.setToolTip(
            "Required. \nPath to directory that only contains fastq files. Note that each individual fastq file should contain sequences that contribute to a single consensus. If directing at the 'umi' command output, this will be the 'bins' directory in the 'umi' command output."
        )
        self.inputField = QLineEdit()
        self.inputField.setEnabled(False)

        self.inputBrowseButton = QPushButton("Browse")
        self.inputBrowseButton.clicked.connect(lambda: self.get_file(self.inputField))

        fileLayout.addRow(self.inputLabel, self.inputBrowseButton)
        fileLayout.addRow(self.inputField)

        self.outputLabel = QLabel("Output Directory Path")
        self.outputLabel.setToolTip(
            "Required. \nPath where output folder will be saved."
        )
        self.outputField = QLineEdit()
        self.outputField.setEnabled(False)
        self.outputBrowseButton = QPushButton("Browse")
        self.outputBrowseButton.clicked.connect(lambda: self.get_file(self.outputField))

        fileLayout.addRow(self.outputLabel, self.outputBrowseButton)
        fileLayout.addRow(self.outputField)

        self.outputNameLabel = QLabel("Output Directory Title (optional)")
        self.outputNameLabel.setToolTip(
            "Optional, has default value. \nName of output file generated by the program."
        )
        self.outputNameField = QLineEdit()
        fileLayout.addRow(self.outputNameLabel, self.outputNameField)

    def set_setting_layout(self, settingLayout: QFormLayout) -> None:
        self.consensusAlgorithmLabel = QLabel("Consensus Algorithm")
        self.consensusAlgorithmComboBox = QComboBox()
        self.consensusAlgorithmComboBox.addItems(["pairwise", "lamassemble", "medaka"])
        settingLayout.addRow(
            self.consensusAlgorithmLabel, self.consensusAlgorithmComboBox
        )

        self.minReadsTitle = QLabel("Minimum Reads (optional)")
        self.minReadsTitle.setToolTip(
            "Minimum number of cluster reads required to generate a consensus sequence. Default is 50."
        )
        self.minReadsField = QLineEdit()
        settingLayout.addRow(self.minReadsTitle, self.minReadsField)

    def set_args(self) -> list:
        args = ["cons"]
        if self.inputField.text():
            args.extend(["-i", self.inputField.text()])
        if self.outputField.text():
            output = self.outputField.text()
            if output[-1] != "/": output += "/"
            outputName = self.outputNameField.text()
            output += outputName
            args.extend(["-o", output])
        if self.minReadsField.text():
            args.extend(["-m", self.minReadsField.text()])
        args.extend(["-c", self.consensusAlgorithmComboBox.currentText()])
        return args
